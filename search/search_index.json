{"config": {"lang": ["en"], "separator": "[\\s\\-]+", "pipeline": ["stopWordFilter"], "fields": {"title": {"boost": 1000.0}, "text": {"boost": 1.0}, "tags": {"boost": 1000000.0}}}, "docs": [{"location": "blog/", "title": "Blog", "text": ""}, {"location": "blog/2023/11/05/4-years-ago-today-i-started-my-first-gamedev-job/", "title": "4 Years Ago Today, I Started My First Gamedev Job", "text": "<p>This post was ported from Tyster's LinkedIn</p> <p>4 years ago today I started my first gamedev job! I remember the mix of emotions as I walked into the Puny Human office and said hi to everyone: anxiety, excitement, a little impostor syndrome, all of the stuff you'd expect.</p> <p>One thing I didn't expect to feel over the next few months was comfort. When you're trying to get into the industry it's easy to idolize or demonize people who are already there, especially the latter if you're struggling to break in. I had idolized game developers since I was a kid and today I was supposed to just \"be\" one?</p> <p>After I got to know my new coworkers, the veil was lifted and I came to the obvious realization that game devs are just people. They all have their own stories, families, flaws, and senses of humor. They're no different than the students I went to school with, or the people I met during local game jams actually. I've learned that game developers at indie studios don't differ from those as AAA, and those at AAA don't differ from hobbyists. They all share the same passion for making games that I do, and that's all that matters.</p> <p>To me, that's really comforting. No matter where I go, as long as I'm making games, I'll always be surrounded by those same legendary game developers I idolized as a kid.. and that's just awesome. </p> <p>Happy anniversary to everyone who makes games, whether it's in a skyscraper or your mom's basement. You're an idol to someone out there, so keep creating \ud83d\ude04</p>"}, {"location": "blog/2023/11/01/ai-generated-voiceovers/", "title": "AI Generated Voiceovers", "text": "<p>This post was ported from Tyster's LinkedIn</p> <p>The Finals is getting flak for using AI generated voice overs, and I don't hear anyone sharing this take:</p> <p>If the feature could not have existed without AI generated text/voice, I guess I don't see the big problem in using AI. The biggest example recently is Embark Studios using it in The Finals for the caster-like voice overs that use things like your team name (which are user generated afaik) to make puns and jokes while describing what's happening in the game.</p> <p>I don't see how that feature could ever be feasibly created without removing the user generated team and character names or simplifying the callouts to basic events to limit VO permutations. So in addition to it being a pretty cool feature in general, I think it's pretty cool that they didn't have to remove any jobs to implement AI. If anything they've added a few either directly or indirectly (using a 3rd party service). As far as I've seen, it doesn't look like The Finals is using AI generated VO for things that are traditionally voiced over by human voice actors.</p> <p>I think there's a lot more nuance to this convo than just \"AI bad\" or \"SEE AI is the future\". What happens if execs think the AI VOs are \"good enough\" and replace the human VO jobs? What if you can't afford VO and want/need voiced characters (such as indies)? By using this technology, are you unwittingly supporting further improvements that would inevitably replace humans? What if the above example about The Finals was instead about AI art- like a feature that wouldn't exist w/o AI art?</p> <p>Stay educated and, if it would be helpful, consider pushing for relevant legislation and/or unionizing!</p>"}, {"location": "blog/2023/07/17/how-to-get-a-game-dev-engineering-job-from-a-game-dev-engineer/", "title": "How To Get a Game Dev Engineering Job, From a Game Dev Engineer", "text": "<p>This post was ported from Tyster's LinkedIn</p> <p>How to get a game dev engineering job, from a game dev engineer!</p> <p>The technology stack for game development is always changing, and most schools can't possibly keep up. Instead of taking the limited time you might have speaking to someone in the industry to schmooze and connect on LinkedIn, try asking them what technology their engineering team uses.</p> <p>For my day-to-day as a Gameplay Engineer, the key technologies used are an in-house ECS (entity component system), Unreal's GAS (gameplay ability system) plugin, and in-house server meshing technology. This is in addition to what you might learn in school (UE5, C++, OOP). Since these positions can be so competitive, it seems that in order to get to the final rounds of interviewing, or potentially just to get an interview, you need to already know the technology that a company uses well, even if you feel like you could pick anything up quickly.</p> <p>Here are some other technologies that game dev students don't seem to know well enough coming out of school: UE5, Source Control (centralized vs decentralized), Unreal's special C++, Multiplayer Networking, the many useful console commands, the many useful debugging tools, and the aforementioned GAS.</p> <p>You can also specialize in some of the hundreds of tools Unreal provides to target specific job positions better. Some examples..</p> <p>UI Engineer (Unreal): Slate, Widget animations, how to tie UI into GAS, Unreal's Input and Enhanced Input systems (and how to support consoles), the Widget Reflector, Unreal's localization pipeline, and Widgets in C++</p> <p>AI Engineer (Unreal): State Tree, Behavior Tree, Utility Scoring, Unreal Pathfinding, Unreal's AI Perception Component, Mass, and good State Machine usage</p> <p>If anyone has info to share or add, leave a comment \ud83d\ude00 </p>"}, {"location": "blog/2023/09/13/unity-pricing-changes/", "title": "Unity Pricing Changes", "text": "<p>This post was ported from Tyster's LinkedIn</p> <p>Unity changed their pricing, leading me to unleash my inner excel nerd and dig deeper on what this actually means for my Unity F2P game.</p> <p>Besides the obviously ridiculous concept of charging per install (and the questions surrounding fraudulent/malicious reinstalls), the rev share that Unity gets is not as large as I originally understood. This post is going to go over some important stats I found and logged on this (public to view) Google Sheet: </p> <p>https://docs.google.com/spreadsheets/d/1oCEUxcdnsTJd4J8PFhi6iKpjpYHJb4TfUxPlZALAz4A</p> <p>For starters, the \"Runtime Fee\" (fee per install) only applies after you've had at least 200k lifetime installs (per game, not company!) AND have made $200k rev in the last 12 months (again, per game). These requirements jump up massively to 1M installs and $1M annual rev for Unity Pro and Unity Enterprise plans. The fees are also progressively smaller as your # installs rises, but only for Pro and Enterprise, which means it's extremely punishing to get more installs past those marks if you're using Unity Free.</p> <p>To me, this means Unity is pushing aggressively for successful games to sign up for one of their monthly plans (Pro/Enterprise) to avoid outrageous Runtime Fees. These plans are priced per seat, with Pro being the cheapest at ~$185 a month. If you're worried about that price like I was, remember that you would only want to upgrade if you're about to hit that $200k annual rev marker, and once you upgrade, that marker jumps to $1M annual rev. </p> <p>The biggest thing I've learned from graphing out this data is that if you are not a free game (because remember, the Runtime Fee is only after X rev on a particular game), you have to actually pay attention to how much rev you make per install. The second biggest thing is that it becomes a necessity to upgrade to either Pro or Enterprise when your game begins to get very profitable ($200k annual rev).</p> <p>Assuming you get Unity Pro/Enterprise for your successful game, the only conditions I've found where you pay Unity a fee that is higher than the rev you make per install is if you make less than $0.01 per install and have over 2M or so installs ($60k in fees, no rev made, using Unity Pro). However, with those exact same numbers, your rev that year can only be $240k or so, which doesn't actually reach the $1M rev marker for Pro, so you don't owe anything and you're actually up $240k (minus ~$2k for annual Pro). If you had Unity Free with the same numbers ($0.01 rev per install and 2M installs), then you would be down about $140k, which is why it's important to understand the pricing plans Unity has and when they become necessary to upgrade to.</p> <p>So, who's getting hit the hardest with these changes? It appears to be games that have a ton of installs, very low rev per install, and have $200k/$1M+ rev. If you avoid at least one of those items, it seems you're unlikely to pay anything unusual, and for most indies, you'll pay nothing at all.</p> <p>I hope this was helpful to someone!</p>"}, {"location": "minikit/", "title": "Minikit Plugins", "text": "<p>\"Minikit\" is a family of free modular plugins for  Unity that solve common problems in very generic ways.</p> <p>Minikit plugins are designed to function on their own despite sharing a surname, ensuring your development doesn't get stuck in a foreign ecosystem. These plugins are born from concepts practiced in professional game development as well as features from other top shelf game engines like  Unreal Engine.</p> <p>Check out the various Minikit plugins by browsing the pages in this category.</p> <p>How can I contribute?</p> <p>The Minikit Plugins are put out into the world to help others. If you feel inclined to improve any them in some way, please don't hesitate to get in contact with Tyster!</p>"}, {"location": "minikit/ability-system/", "title": "Ability System Overview", "text": "<p>In development</p> <p>This plugin is being actively developed, and may change (sometimes drastically) over time. Be aware that pulling updates may include changes in the API or underlying functionality.</p> <p>The Ability System Minikit is a  Unity plugin for building abilities, attributes, and more to modularize your gameplay code. The Ability System Minikit is designed after  Unreal Engine's Gameplay Ability System (GAS).</p> <p></p>"}, {"location": "minikit/ability-system/#setup", "title": "Setup", "text": "<p>Relies on Framework</p> <p>This plugin uses features from the Framework plugin, you should be sure to set up Framework in your project in addition to this plugin.</p>"}, {"location": "minikit/ability-system/#manual-setup", "title": "Manual setup", "text": "<p>To set up the plugin manually, go to the plugin's repository linked below, click the green \"Code\" button, then click \"Download ZIP\".</p> <p><code>https://github.com/minicritgames/ability-system</code></p> <p>Extract this <code>.zip</code> file into your  Unity project's \"Assets\" folder.</p> <p>Minikit plugins are located under the \"Minikit\" namespace in C#.</p>"}, {"location": "minikit/ability-system/#setup-with-git", "title": "Setup with <code>git</code>", "text": "<p>Open your command line application and <code>cd</code> to your  Unity project's root folder.</p> <p>Run the below command to add the plugin as a submodule to your project as a folder named \"Minikit Ability System\", located in the \"Assets\" folder of your project. <pre><code>git submodule add --force https://github.com/minicritgames/ability-system \"Assets\\Minikit Ability System\"\n</code></pre> To update the plugin, you can simply run <code>git-update-submodule.bat</code>, which is located in the plugin's folder.</p> <p></p>"}, {"location": "minikit/ability-system/#concepts", "title": "Concepts", "text": ""}, {"location": "minikit/ability-system/#abilities", "title": "Abilities", "text": "<p>Abilities are activatable chunks of code that can be granted and removed from players. Abilities can be anything from jumping, to casting a fireball, to anything else you want. Abilities have many features built in to allow for things such as blocking usage under certain conditions that can be imposed by other concepts in the Ability System like Effects.</p>"}, {"location": "minikit/ability-system/#effects", "title": "Effects", "text": "<p>Effects are chunks of code that can be applied to players to represent temporary or permanent \"effects\" such as poisons, buffs, or ability cooldowns. Effects can run code at a tick interval, when applied/removed, or any time you want.</p>"}, {"location": "minikit/ability-system/#tags", "title": "Tags", "text": "<p>Tags are strings designed for internal use in the Ability System to categorize and ID Abilities, Effects, and more. They can be used by systems outside of the Ability System.</p>"}, {"location": "minikit/ability-system/#attributes", "title": "Attributes", "text": "<p>Attributes are properties that can be modified by external sources like Effects or custom C# code and have those modifications rolled back for things like temporary health increases, speed boosts, and more. They are intended to be used in place of basic floats and ints when working with values that change during gameplay.</p>"}, {"location": "minikit/behaviour-tree/", "title": "Behaviour Tree Overview", "text": "<p>In development</p> <p>This plugin is being actively developed, and may change (sometimes drastically) over time. Be aware that pulling updates may include changes in the API or underlying functionality.</p> <p>The Behaviour Tree Minikit is a  Unity plugin that allows for C#-based behaviour trees. Behaviour Trees can be used for a variety of applications, usually for bots and the logic that bots use to determine their actions.</p> <p></p>"}, {"location": "minikit/behaviour-tree/#setup", "title": "Setup", "text": ""}, {"location": "minikit/behaviour-tree/#manual-setup", "title": "Manual setup", "text": "<p>To set up the plugin manually, go to the plugin's repository linked below, click the green \"Code\" button, then click \"Download ZIP\".</p> <p><code>https://github.com/minicritgames/behaviour-tree</code></p> <p>Extract this <code>.zip</code> file into your  Unity project's \"Assets\" folder.</p> <p>Minikit plugins are located under the \"Minikit\" namespace in C#.</p>"}, {"location": "minikit/behaviour-tree/#setup-with-git", "title": "Setup with <code>git</code>", "text": "<p>Open your command line application and <code>cd</code> to your  Unity project's root folder.</p> <p>Run the below command to add the plugin as a submodule to your project as a folder named \"Minikit Behaviour Tree\", located in the \"Assets\" folder of your project. <pre><code>git submodule add --force https://github.com/minicritgames/behaviour-tree \"Assets\\Minikit Behaviour Tree\"\n</code></pre> To update the plugin, you can simply run <code>git-update-submodule.bat</code>, which is located in the plugin's folder.</p> <p></p>"}, {"location": "minikit/behaviour-tree/#concepts", "title": "Concepts", "text": ""}, {"location": "minikit/behaviour-tree/#behaviour-trees", "title": "Behaviour Trees", "text": "<p>Behaviour Trees consist of nodes representing actions, conditions, or control flow elements like sequences and selectors, arranged in a tree-like fashion. NPCs traverse this tree from the root to the leaf nodes, executing actions based on the conditions and control flow defined in the tree.</p>"}, {"location": "minikit/behaviour-tree/#nodes", "title": "Nodes", "text": "<p>Nodes in a Behavior Tree are the building blocks representing individual actions, conditions, or control flow elements such as sequences and selectors. Each node encapsulates a specific behavior or logic.</p>"}, {"location": "minikit/framework/", "title": "Framework Overview", "text": "<p>In development</p> <p>This plugin is being actively developed, and may change (sometimes drastically) over time. Be aware that pulling updates may include changes in the API or underlying functionality.</p> <p>The Framework Minikit is a  Unity plugin containing helpful extension classes and data classes that assist with common functionality in game projects. Some of the other Minikit plugins use features in the Framework plugin.</p> <p>Included in Framework are Tags, Buckets, Timers, and more.</p> <p></p>"}, {"location": "minikit/framework/#setup", "title": "Setup", "text": ""}, {"location": "minikit/framework/#manual-setup", "title": "Manual setup", "text": "<p>To set up the plugin manually, go to the plugin's repository linked below, click the green \"Code\" button, then click \"Download ZIP\".</p> <p><code>https://github.com/minicritgames/framework</code></p> <p>Extract this <code>.zip</code> file into your  Unity project's \"Assets\" folder.</p> <p>Minikit plugins are located under the \"Minikit\" namespace in C#.</p>"}, {"location": "minikit/framework/#setup-with-git", "title": "Setup with <code>git</code>", "text": "<p>Open your command line application and <code>cd</code> to your  Unity project's root folder.</p> <p>Run the below command to add the plugin as a submodule to your project as a folder named \"Minikit Framework\", located in the \"Assets\" folder of your project. <pre><code>git submodule add --force https://github.com/minicritgames/framework \"Assets\\Minikit Framework\"\n</code></pre> To update the plugin, you can simply run <code>git-update-submodule.bat</code>, which is located in the plugin's folder.</p> <p></p>"}, {"location": "minikit/input-and-interface/", "title": "Input and Interface Overview", "text": "<p>In development</p> <p>This plugin is being actively developed, and may change (sometimes drastically) over time. Be aware that pulling updates may include changes in the API or underlying functionality.</p> <p>The Input and Interface Minikit is a  Unity plugin for managing players' inputs and user interface through easy integration of new input devices, splitscreen support, and gamepad UI navigation. The Input and Interface Minikit was designed after  Unreal's Common UI plugin and  Unreal's internal concepts of player-screen relationship(s).</p> <p></p>"}, {"location": "minikit/input-and-interface/#setup", "title": "Setup", "text": ""}, {"location": "minikit/input-and-interface/#manual-setup", "title": "Manual setup", "text": "<p>To set up the plugin manually, go to the plugin's repository linked below, click the green \"Code\" button, then click \"Download ZIP\".</p> <p><code>https://github.com/minicritgames/input-and-interface</code></p> <p>Extract this <code>.zip</code> file into your  Unity project's \"Assets\" folder.</p> <p>Minikit plugins are located under the \"Minikit\" namespace in C#.</p>"}, {"location": "minikit/input-and-interface/#setup-with-git", "title": "Setup with <code>git</code>", "text": "<p>Open your command line application and <code>cd</code> to your  Unity project's root folder.</p> <p>Run the below command to add the plugin as a submodule to your project as a folder named \"Minikit Input and Interface\", located in the \"Assets\" folder of your project. <pre><code>git submodule add --force https://github.com/minicritgames/input-and-interface \"Assets\\Minikit Input and Interface\"\n</code></pre> To update the plugin, you can simply run <code>git-update-submodule.bat</code>, which is located in the plugin's folder.</p> <p></p>"}, {"location": "minikit/input-and-interface/#concepts", "title": "Concepts", "text": ""}, {"location": "minikit/input-and-interface/#players", "title": "Players", "text": "<p>Players are implemented in Input and Interface as an interface that can be added on top of any existing \"Player\" class you may have in your game. Each Player is aware of what UI element is being selected, if any.</p>"}, {"location": "minikit/input-and-interface/#selectables", "title": "Selectables", "text": "<p>Selectables are intended to be used in place of Unity's built in Button class and built in automatic navigation system. With selectables, you can add custom navigation logic, allow for multiple players to select the same button, and add custom selection rules.</p>"}, {"location": "minikit/inventory/", "title": "Inventory Overview", "text": "<p>In development</p> <p>This plugin is being actively developed, and may change (sometimes drastically) over time. Be aware that pulling updates may include changes in the API or underlying functionality.</p> <p>The Inventory Minikit is a  Unity plugin for creating items and various inventory systems like bags, equipment, and weapons. The Inventory Minikit is designed after the incredible Arc Inventory plugin created for  Unreal Engine.</p> <p></p>"}, {"location": "minikit/inventory/#setup", "title": "Setup", "text": "<p>Relies on Framework</p> <p>This plugin uses features from the Framework plugin, you should be sure to set up Framework in your project in addition to this plugin.</p>"}, {"location": "minikit/inventory/#manual-setup", "title": "Manual setup", "text": "<p>To set up the plugin manually, go to the plugin's repository linked below, click the green \"Code\" button, then click \"Download ZIP\".</p> <p><code>https://github.com/minicritgames/inventory</code></p> <p>Extract this <code>.zip</code> file into your  Unity project's \"Assets\" folder.</p> <p>Minikit plugins are located under the \"Minikit\" namespace in C#.</p>"}, {"location": "minikit/inventory/#setup-with-git", "title": "Setup with <code>git</code>", "text": "<p>Open your command line application and <code>cd</code> to your  Unity project's root folder.</p> <p>Run the below command to add the plugin as a submodule to your project as a folder named \"Minikit Inventory\", located in the \"Assets\" folder of your project. <pre><code>git submodule add --force https://github.com/minicritgames/inventory \"Assets\\Minikit Inventory\"\n</code></pre> To update the plugin, you can simply run <code>git-update-submodule.bat</code>, which is located in the plugin's folder.</p> <p></p>"}, {"location": "minikit/inventory/#concepts", "title": "Concepts", "text": ""}, {"location": "minikit/inventory/#items", "title": "Items", "text": "<p>Items are collections of Shards (see below) that define everything about an item. Items are just data, and can be represented by the developer in a number of ways by storing data in Shards, such as 2D in a bag, or 3D as an object laying on the ground or in a character's hands.</p>"}, {"location": "minikit/inventory/#shards", "title": "Shards", "text": "<p>Shards are chunks of data that may be repeated between multiple items. When Shards are defined on an item definition, they are also optionally marked with Tags to help you access them in code later. For example, a Shard may be a Text Shard, containing a string that can be defined in the item definition as the Name Shard for this item. However, you could also have a Text Shard that acts as the description for the item in UI. Shards can be subclassed to make custom data such as hitboxes, ammo values, UI visuals, etc.</p>"}, {"location": "minikit/inventory/#inventory", "title": "Inventory", "text": "<p>Inventories are components that can live on GameObjects that contain Slots. Inventories can be subclassed to allow for reactive code when items are added or removed from the inventory, and more.</p>"}, {"location": "minikit/inventory/#slots", "title": "Slots", "text": "<p>Slots hold Items, and can also contain Tags to define what the slot is for, for example you may have 20 Slots in your character's inventory, but 2 of them are marked with the \"Weapon\" Tag Filter, defining that only Items that tag are allowed to go in the slot. Between the Slot's Tags and Tag Filter, you can use slots for any situation regarding Items.</p>"}, {"location": "minikit/lua/", "title": "Lua Scripting Overview", "text": "<p>Battle-tested plugin</p> <p>This plugin was developed symbiotically with World to Build and has been supporting player-made and developer-made Lua scripts in production for years.</p> <p>The Lua Scripting Minikit is known as bLua and is an open source plugin allowing you to communicate between Unity's C# and native  Lua 5.4 at blazing speeds anywhere from 100 - 10,000 times faster than other Lua plugins. bLua was designed by a team of developers with years of experience in both Lua and user-accessible scripting solutions in Unity.</p> <p>Click here to learn more about bLua.</p> <p> Tyster, who maintains bLua, also develops and maintains the Minikit Plugins. </p>"}, {"location": "minikit/state-machine/", "title": "State Machine Overview", "text": "<p>In development</p> <p>This plugin is being actively developed, and may change (sometimes drastically) over time. Be aware that pulling updates may include changes in the API or underlying functionality.</p> <p>The State Machine Minikit is a  Unity plugin that allows for C#-based state machines. State Machines can be used for a variety of applications, including large systems like bots or even small systems like a door's state.</p> <p></p>"}, {"location": "minikit/state-machine/#setup", "title": "Setup", "text": ""}, {"location": "minikit/state-machine/#manual-setup", "title": "Manual setup", "text": "<p>To set up the plugin manually, go to the plugin's repository linked below, click the green \"Code\" button, then click \"Download ZIP\".</p> <p><code>https://github.com/minicritgames/state-machine</code></p> <p>Extract this <code>.zip</code> file into your  Unity project's \"Assets\" folder.</p> <p>Minikit plugins are located under the \"Minikit\" namespace in C#.</p>"}, {"location": "minikit/state-machine/#setup-with-git", "title": "Setup with <code>git</code>", "text": "<p>Open your command line application and <code>cd</code> to your  Unity project's root folder.</p> <p>Run the below command to add the plugin as a submodule to your project as a folder named \"Minikit State Machine\", located in the \"Assets\" folder of your project. <pre><code>git submodule add --force https://github.com/minicritgames/state-machin \"Assets\\Minikit State Machine\"\n</code></pre> To update the plugin, you can simply run <code>git-update-submodule.bat</code>, which is located in the plugin's folder.</p> <p></p>"}, {"location": "minikit/state-machine/#concepts", "title": "Concepts", "text": ""}, {"location": "minikit/state-machine/#state-machine", "title": "State Machine", "text": "<p>State Machines consist of nodes representing various states (called States), transitions between states (called State Transitions), and conditions triggering those transitions, allowing for the organized management of complex behaviors and interactions within a game.</p>"}, {"location": "blog/archive/2023/", "title": "2023", "text": ""}, {"location": "blog/category/linkedin/", "title": "LinkedIn", "text": ""}]}